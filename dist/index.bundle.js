(self.webpackChunkgame=self.webpackChunkgame||[]).push([[57],{497:()=>{function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function i(e){for(var i=1;i<arguments.length;i++){var r=null!=arguments[i]?arguments[i]:{};i%2?t(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):t(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function n(t,i,n){return(i=function(t){var i=function(t,i){if("object"!=e(t)||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,i||"default");if("object"!=e(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===i?String:Number)(t)}(t,"string");return"symbol"==e(i)?i:i+""}(i))in t?Object.defineProperty(t,i,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[i]=n,t}for(var r=document.getElementById("rules-btn"),o=document.getElementById("close-btn"),c=document.getElementById("rules"),s=document.getElementById("canvas"),f=s.getContext("2d"),l=0,y={x:s.width/2,y:s.height/2,size:10,speed:4,dx:4,dy:-4,visible:!0},u={x:s.width/2-40,y:s.height-20,w:80,h:10,speed:8,dx:0,visible:!0},d={w:70,h:20,padding:10,offsetX:45,offsetY:60,visible:!0},a=[],h=0;h<9;h++){a[h]=[];for(var b=0;b<5;b++){var p=h*(d.w+d.padding)+d.offsetX,v=b*(d.h+d.padding)+d.offsetY;a[h][b]=i({x:p,y:v},d)}}function w(){y.x+=y.dx,y.y+=y.dy,(y.x+y.size>s.width||y.x-y.size<0)&&(y.dx*=-1),(y.y+y.size>s.height||y.y-y.size<0)&&(y.dy*=-1),y.x-y.size>u.x&&y.x+y.size<u.x+u.w&&y.y+y.size>u.y&&(y.dy=-y.speed),a.forEach((function(e){e.forEach((function(e){e.visible&&y.x-y.size>e.x&&y.x+y.size<e.x+e.w&&y.y+y.size>e.y&&y.y-y.size<e.y+e.h&&(y.dy*=-1,e.visible=!1,++l%45==0&&(y.visible=!1,u.visible=!1,setTimeout((function(){g(),l=0,u.x=s.width/2-40,u.y=s.height-20,y.x=s.width/2,y.y=s.height/2,y.visible=!0,u.visible=!0}),500)))}))})),y.y+y.size>s.height&&(g(),l=0)}function g(){a.forEach((function(e){e.forEach((function(e){e.visible=!0}))}))}function x(){f.clearRect(0,0,s.width,s.height),f.beginPath(),f.arc(y.x,y.y,y.size,0,2*Math.PI),f.fillStyle=y.visible?"#0095dd":"transparent",f.fill(),f.closePath(),f.beginPath(),f.rect(u.x,u.y,u.w,u.h),f.fillStyle=u.visible?"#0095dd":"transparent",f.fill(),f.closePath(),f.font="20px Arial",f.fillText("Score: ".concat(l),s.width-100,30),a.forEach((function(e){e.forEach((function(e){e.visible&&(f.beginPath(),f.rect(e.x,e.y,e.w,e.h),f.fillStyle="#0095dd",f.fill(),f.closePath())}))}))}!function e(){u.x+=u.dx,u.x+u.w>s.width&&(u.x=s.width-u.w),u.x<0&&(u.x=0),w(),x(),requestAnimationFrame(e)}(),document.addEventListener("keydown",(function(e){"Right"===e.key||"ArrowRight"===e.key?u.dx=u.speed:"Left"!==e.key&&"ArrowLeft"!==e.key||(u.dx=-u.speed)})),document.addEventListener("keyup",(function(e){"Right"!==e.key&&"ArrowRight"!==e.key&&"Left"!==e.key&&"ArrowLeft"!==e.key||(u.dx=0)})),r.addEventListener("click",(function(){return c.classList.add("show")})),o.addEventListener("click",(function(){return c.classList.remove("show")}))}},e=>{var t;t=497,e(e.s=t)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,